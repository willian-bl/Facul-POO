----- POO 15/02/2023 -------------------------------------------------------------------------------------------------------------------------------------------------

*Abstrair é focar no que é importante, para conseguir resolver problemas através da programação

Conceitos de Orientação a Objetos:
	- Encapsulamento:
		Restringe acessos a métodos e atributos e faz com que cada classe tenha sua própria responsabilidade. Também esconde detalhes da implementação que não nos interessa.
	- Herança:
		Ajuda com a reutilização do código. Pensar em herança genética. É construir uma classe mais específica com base em uma classe generalizada. Essa classe específica vai herdar características, métodos e atributos da classe generalizada.
	- Polimorfismo:
		Duas classes com a mesma linha de herança podem possuir comportamentos diferentes para o mesmo método

------- JAVA ------------------------------
Java é uma linguagem fortemente tipada
	
O código fonte .java é compilado em .class para ser executado na JVM (Java Virtual Machine). Esta, por sua vez, é instalada no computador do usuário através do kit JRE (Java Runtime Environment). Assim, quem compila o código para linguagem de máquina é a JVM, que é a mesma em Windows, Linux, MAC etc. Dessa forma, um código feito em JAVA pode rodar em diferentes plataformas, sem precisar de adaptações.

O JDK é o Java Development Kit (ou kit de desenvolvimento Java). Quem pretende desenvolver em JAVA tem que ter esse kit instalado na máquina. Ele já vem também com o JRE.

O Java possui versões LTS (Long Term Support) e Feature Releases. As feature releases são lançadas de 6 em 6 meses. São versões oficiais que trazem novas funcionalidades para os programadores testarem. Porém, o suporte dessas versões é de apenas 6 meses. Já as LTS's são lançadas de 3 em 3 anos e trazem um apanhado das funcionalidades lançadas com as Feature Releases, tendo um tempo de suporte bem maior que as feature releases. É recomendado usar LTS em ambiente de produção, para não precisar ficar atualizando a versão do Java a cada 6 meses.

------- HERANÇA ---------------------------
O que é? 
	Criar novas classes a partir de classes já existentes

Por que fazer isso?
	Evita repetição de código
	Facilita a manutenção

Dica: Quando faz sentido usar herança?
	Lembrar: Herança tem haver com o relacionamento "é um/uma":
	Ex: Em um programa, onde tenho pessoa física e jurídica, tanto a pessoa física quanto a jurídica É UMA pessoa. Logo, posso criar uma classe pessoa e fazer com que pessoa física e pessoa jurídica herdem da classe pessoa

UML:
	Na UML , uma seta com a ponta sem preenchimento (aberta) sai da classe que está herdando (subclasse) e chega na classe que está sendo a "mãe" (super classe)

Nomenclatura:
	Classe que está sendo herdada -> Superclasse (ou classe mãe/pai)
	Classe que está herdando -> Subclasse (ou classe filha)

Tipos de herança:
	Herança múltipla -> Herdar diretamente de duas classes (no Java não da para fazer isso)
	Herança multinível -> Podemos ter mais de um nível de herança. 
		Por exemplo: Classe C herda da classe B que herda da classe A. (C -> B -> A)
		Assim, a classe B será a superclasse da classe C mas, ao mesmo tempo, será uma subclasse da classe A que, por sua vez, é a superclasse da classe B. Assim, tanto B quanto C herdam de A, mas B herda diretamente, enquanto C herda indiretamente.

------- CLASSE ABSTRATA ---------------------------
*A classe abstrata serve de modelo para a crição de outras classes
*A classe abstrata pode ser herdada mas não pode ser instanciada, ou seja, não é possível criar objetos a partir dela
*A classe abstrata pode conter métodos abstratos
*Um método abstrato é apenas declarado, ele não é implementado
*Os métodos abstratos precisam ser, obrigatoriamente, implementados nas subclasses das classes abstratas
*A palavra reservada da linguagem Java para declarar uma classe e/ou método abstrato é "abstract"
		 