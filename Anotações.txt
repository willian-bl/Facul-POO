----- POO 15/02/2023 -------------------------------------------------------------------------------------------------------------------------------------------------

*Abstrair é focar no que é importante, para conseguir resolver problemas através da programação

Conceitos de Orientação a Objetos:
	- Encapsulamento:
		Restringe acessos a métodos e atributos e faz com que cada classe tenha sua própria responsabilidade. Também esconde detalhes da implementação que não nos interessa.
	- Herança:
		Ajuda com a reutilização do código. Pensar em herança genética. É construir uma classe mais específica com base em uma classe generalizada. Essa classe específica vai herdar características, métodos e atributos da classe generalizada.
	- Polimorfismo:
		Duas classes com a mesma linha de herança podem possuir comportamentos diferentes para o mesmo método

------- JAVA ------------------------------
Java é uma linguagem fortemente tipada
	
O código fonte .java é compilado em .class para ser executado na JVM (Java Virtual Machine). Esta, por sua vez, é instalada no computador do usuário através do kit JRE (Java Runtime Environment). Assim, quem compila o código para linguagem de máquina é a JVM, que é a mesma em Windows, Linux, MAC etc. Dessa forma, um código feito em JAVA pode rodar em diferentes plataformas, sem precisar de adaptações.

O JDK é o Java Development Kit (ou kit de desenvolvimento Java). Quem pretende desenvolver em JAVA tem que ter esse kit instalado na máquina. Ele já vem também com o JRE.

O Java possui versões LTS (Long Term Support) e Feature Releases. As feature releases são lançadas de 6 em 6 meses. São versões oficiais que trazem novas funcionalidades para os programadores testarem. Porém, o suporte dessas versões é de apenas 6 meses. Já as LTS's são lançadas de 3 em 3 anos e trazem um apanhado das funcionalidades lançadas com as Feature Releases, tendo um tempo de suporte bem maior que as feature releases. É recomendado usar LTS em ambiente de produção, para não precisar ficar atualizando a versão do Java a cada 6 meses.

------- HERANÇA ---------------------------
O que é? 
	Criar novas classes a partir de classes já existentes

Por que fazer isso?
	Evita repetição de código
	Facilita a manutenção

Dica: Quando faz sentido usar herança?
	Lembrar: Herança tem haver com o relacionamento "é um/uma":
	Ex: Em um programa, onde tenho pessoa física e jurídica, tanto a pessoa física quanto a jurídica É UMA pessoa. Logo, posso criar uma classe pessoa e fazer com que pessoa física e pessoa jurídica herdem da classe pessoa

UML:
	Na UML , uma seta com a ponta sem preenchimento (aberta) sai da classe que está herdando (subclasse) e chega na classe que está sendo a "mãe" (super classe)

Nomenclatura:
	Classe que está sendo herdada -> Superclasse (ou classe mãe/pai)
	Classe que está herdando -> Subclasse (ou classe filha)

Tipos de herança:
	Herança múltipla -> Herdar diretamente de duas classes (no Java não da para fazer isso)
	Herança multinível -> Podemos ter mais de um nível de herança. 
		Por exemplo: Classe C herda da classe B que herda da classe A. (C -> B -> A)
		Assim, a classe B será a superclasse da classe C mas, ao mesmo tempo, será uma subclasse da classe A que, por sua vez, é a superclasse da classe B. Assim, tanto B quanto C herdam de A, mas B herda diretamente, enquanto C herda indiretamente.

------- CLASSE ABSTRATA ---------------------------
*A classe abstrata serve de modelo para a crição de outras classes
*A classe abstrata pode ser herdada mas não pode ser instanciada, ou seja, não é possível criar objetos a partir dela
*A classe abstrata pode conter métodos abstratos
*Um método abstrato é apenas declarado, ele não é implementado
*Os métodos abstratos precisam ser, obrigatoriamente, implementados nas subclasses das classes abstratas
*A palavra reservada da linguagem Java para declarar uma classe e/ou método abstrato é "abstract"

------- POLIMORFISMO ------------------------------
Objetos de diferentes classes podem ser tratados de maneira semelhante. 
Isso é possível porque mesmo que duas classes tenham a mesma linha de herança, elas podem ter implementações distintas para um mesmo método, desde que a assinatura do método seja mantida. 
Com isso, uma variável da superclasse pode referenciar uma variável da subclasse, por exemplo. 

-> O polimorfismo está muito ligado com o conceito de herança

Conceitos relacionados:
	*Mundo: São todos os atributos e métodos de uma classe. Ex: O mundo da classe "Professor" é o conjunto de seus atributos (Código, nome e curso) e métodos (getCodigo, setCodigo, getNome ...)
	*Casting: em português, coerção, é forçar uma variável a se tornar de outro tipo.  
	*Interface: é uma coleção de métodos que uma classe pode implementar. Assim como as classes abstratas, as interfaces não podem ser instanciadas, apenas implementadas. Porém a principal diferença entre interface e classe abstrata é que a classe abstrata pode conter métodos implementados ou concretos (que terão sua implementação herdada para as classes filhas), já a interface não: todos os seus métodos são métodos abstratos. Além disso, na interface podemos ter atributos, porém estes sempre serão valores CONSTANTES, que não podem ser alterados. Não existe "classe filha" de interfaces, dizemos apenas que a classe está implementando uma certa interface. Em Java, é possível que uma mesma classe implemente várias interfaces, mesmo não sendo possível a herança múltipla.

Exemplo de atribuições de objetos usando polimorfismo:

	Com o polimorfismo, podemos atribuir um objeto da classe filha a uma variável da classe pai. Ex:
Professor p1 = new ProfessorHorista();
	Isso é possível porque o mundo de Professor está dentro da classe ProfessorHorista, pois ele foi herdado da classe pai (Professor). O interessante é que TODOS os atributos de ProfessorHorista serão instanciados, eles existirão na memória do programa mas, através da variável p1, só poderemos acessar os atributos que existem na classe Professor. O mesmo vale para os métodos. Isso porque Professor só enxerga o seu mundo, ou seja, não enxerga o mundo de ProfessorHorista (que é formado pelo mundo da classe Professor + os seus próprios atributos e métodos). 
	Mas se todos os atributos e métodos do ProfessorHorista estão definidos, então conseguimos transformar a variável p1 em uma variável do tipo ProfessorHorista? Sim, mas isso NÃO é feito por meio de uma atribuição comum, do tipo:
ProfessorHorista p2 = p1;
	Para fazer essa transformação precisamos usar o "casting" ou "coerção", em português, que é forçar uma variável a se tornar de outro tipo. Em Java, fazemos isso da seguinte forma:
ProfessorHorista p2 = (ProfessorHorista)p1
	Assim, estamos transformando o conteúdo da variável p1 para o tipo ProfessorHorista antes de realizar a atribuição para p2. Dessa forma, p2 será do tipo ProfessorHorista e passaremos a ter acesso a todos os seus atributos e métodos, diferente do que acontecia com a variável p1. O casting é necessário pois o Java é uma linguagem fortemente tipada.
	Além disso, caso quisermos usar algum método da classe filha, precisaremos fazer a conversão da variável da classe pai (como no exemplo anterior). Mas para fazer a coerção devemos saber exatamente com que tipo de objeto estamos lidando. Uma forma de fazer isso é usando o operador "instanceof" do Java. Ex:
p1 instanceof ProfessorHorista;
	Observe que mesmo p1 sendo do tipo Professor, o objeto que foi instanciado na variável p1 é do tipo ProfessorHorista. Logo, a verificação retornará true.

	Outra informação sobre isso é que não conseguimos fazer ao contrário, ou seja, atribuir um objeto da classe pai na classe filha. Ex:
ProfessorHorista p3 = new Professor();
	Isso porque se a variável é do tipo ProfessorHorista ela espera receber todos os atributos e métodos do mundo de ProfessorHorista, o que não vai acontecer, pois ao instanciar um objeto da classe Professor() ele não "enxerga" os atributos e métodos definidos exclusivamente em ProfessorHorista, ou seja, não tem acesso ao seu mundo completo, somente a parte dele (aquilo que ProfessorHorista herdou de Professor). Assim, a linha de código do exemplo dará erro.

	Resumindo: "o pai recebe o filho, mas o filho não recebe o pai"

*No Java, para descobrir se um objeto é de uma determinada classe usamos o operador "instanceof"

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> Atributos de instância ou de classe <<

Atributos podem ser de instância ou de classe. O atributo de instância está relacionado ao objeto, ou seja, cada objeto possui seus próprios atributos de instância.
Já os atributos de classe, como o nome diz, pertencem à classe não estando associado a um objeto específico. O atributo de instância é único e é compartilhado entre objetos da classe. Ele existe independente da existência de um objeto.

Exemplo:
public class Exemplo{
	private int x;
	private static int y;
                  |
                  V
A palavra      "static" na declaração do atributo indica que o atributo é de CLASSE e não de instância
Não precisamos ter um objeto instanciado para acessar o atributo. No exemplo anterior, mesmo sem um objeto podemos chamar o atributo. Se ele for público, fazemos da seguinte forma:
NomeDaClasse.nomeAtributo

Também existem métodos de classe e de atributo. Podemos definir eles usando o static também. As mesmas regras dos atributos de classe e de instância são válidos para os métodos.

Além disso, métodos de classe (static) não podem acessar atributos de instância, porque senão eles dependeriam da instanciação de um objeto para funcionar.

No trabalho:
O vetor Contato será um atributo de classe
Não pode ter um id repetido no vetor de Agenda