AGENDA DE CONTATOS

Inicialmente iremos desenvolver uma agenda de contatos

*Conforme as aulas forem avançando, novas exigências e alterações serão feitas no trabalho.

-----------------------------------------------------
Requisitos:
A agenda deve ter contatos pessoais e profissionais

------------------------------------------------------
Classes:
*Contato
	Características:
		- deve ser uma classe abstrata

	Atributos:
		- número do contato (int) - ID sequencial do contato (0, 1, 2, 3...)
		- nome do contato (String)
		- endereço (String)
		- telefone (String)
		- email (String) - opicional
	
	Métodos: Além dos getters e setters de todos os parâmetros...
		- mostraDetalheContato (Método abstrato)
		

*ContatoPessoal
	Características:
		- É uma subclasse da classe Contato
	Atributos: Além dos herdados da classe Contato
		- dataDeAniversario (String)
		- relacaoDeProximidade (String) - Se é amigo, tio, vizinho, conhecido, professor etc
	Métodos: Além dos getters e setters de todos os parâmetros...
		- mostraDetalheContato (sem retorno) - Mostra os dados do contato da seguinte forma:

Número: 99999  Nome: xxxxxxxxxxxxxxxxxxxxx
Endereço: xxxxxxxxxxxxxxxxxxxx  Telefone: 999999999
email: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Data de aniversário: dd/mm/aaaa  Relação de proximidade: xxxxxxxxxx

	
*ContatoProfissional
	Características:
		- É uma subclasse da classe Contato
	Atributos: Além dos herdados da classe Contato
		- empresaOndeTrabalha (String)
		- cargo (String)
	Métodos: Além dos getters e setters de todos os parâmetros...	
		- mostraDetalheContato (sem retorno) - Mostra os dados do contato da seguinte forma:

Número: 99999  Nome: xxxxxxxxxxxxxxxxxxxxx
Endereço: xxxxxxxxxxxxxxxxxxxx  Telefone: 999999999
email: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Empresa: xxxxxxxxxxxxxxx Cargo: xxxxxxxxxx

*Agenda
	Características:
		- É a classe que vai armazenar vetores com os contatos pessoais e profissionais
	Atributos:
		- cpessoais (vetor de objetos ContatoPessoal) - Tamanho 100 
		- cprofissionais (vetor de objetos ContatoProfissional) - Tamanho 100
	Métodos:
		- ContatoPessoal buscaContatoPessoal(int numero) - esse método percorre o vetor cpessoais até encontrar um contato pessoal que tenha o número igual ao parâmetro número. Se encontrar o contato, o método deve retorná-lo. Caso contrário, retorna null
		- ContatoPessoal buscaContatoPessoal(String nome) - esse método percorre o vetor cpessoais até encontrar um contato pessoal que tenha o nome igual ao parâmetro nome. Se encontrar o contato, o método deve retorná-lo. Caso contrário, retorna null.
			Dica: Para comparar Strings podemos utilizar os métodos "equals" ou "iqualsIgnoreCase". Esses métodos retornam true se as Strings são iguais ou false caso sejam diferentes.
				Exemplos: s1 = "teste"; s2 = "teste"; s3="TESTE";
				s1.equals(s2) -> retorna true
				s1.equals(s3) -> retorna false
				s1.equalsIgnoreCase(s2) -> retorna true
				s1.equalsIgnoreCase(s3) -> retorna true
		- void insertPessoal(ContatoPessoal cpes) - esse método insere o parâmetro cpes em uma posição livre do vetor cpessoais. Se não houver posição livre para a inclusão do objeto, mostrar uma mensagem explicativa indicando que o vetor está cheio
		
		De forma análoga ao que fizemos para ContatoPessoal, criar os métodos para ContatoProfissional:
		- ContatoProfissional buscaContatoProfissional(int numero)
		- ContatoProfissional buscaContatoPrifissional(String nome)
		- void insertProfissional(ContatoProfissional cprof)

